# Generated by Django 5.2.1 on 2025-05-22 06:29

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('members', '0012_remove_member_unifi_user_id'),
        ('rooms', '0004_alter_room_options_alter_roomitemtype_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='TaskType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Aufgabenname')),
                ('description', models.TextField(blank=True, verbose_name='Beschreibung')),
                ('difficulty', models.CharField(choices=[('leicht', 'Leicht'), ('mittel', 'Mittel'), ('anspruchsvoll', 'Anspruchsvoll')], default='mittel', max_length=20)),
                ('icon', models.CharField(blank=True, help_text='Icon-Klassenname f체r UI', max_length=100)),
                ('color', models.CharField(default='#4CAF50', help_text='Hex-Farbcode f체r UI', max_length=7)),
                ('max_slots_per_day', models.PositiveIntegerField(default=10, verbose_name='Max. Slots pro Tag')),
                ('min_experience_level', models.PositiveIntegerField(default=0, verbose_name='Mindest-Erfahrungslevel')),
                ('requires_training', models.BooleanField(default=False, verbose_name='Einweisung erforderlich')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Aufgabentyp',
                'verbose_name_plural': 'Aufgabentypen',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TaskSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(verbose_name='Datum')),
                ('start_time', models.TimeField(default='08:00', verbose_name='Startzeit')),
                ('end_time', models.TimeField(default='17:00', verbose_name='Endzeit')),
                ('max_slots', models.PositiveIntegerField(verbose_name='Maximale Anzahl Slots')),
                ('max_participants_per_slot', models.PositiveIntegerField(default=1, verbose_name='Max. Teilnehmer pro Slot')),
                ('notes', models.TextField(blank=True, verbose_name='Hinweise')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_schedules', to='members.member')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rooms.room')),
                ('task_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='taskmanager.tasktype')),
            ],
            options={
                'verbose_name': 'Aufgabenplanung',
                'verbose_name_plural': 'Aufgabenplanungen',
                'ordering': ['date', 'start_time'],
                'unique_together': {('task_type', 'room', 'date')},
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.TimeField(verbose_name='Startzeit')),
                ('end_time', models.TimeField(verbose_name='Endzeit')),
                ('max_participants', models.PositiveIntegerField(default=1, verbose_name='Max. Teilnehmer')),
                ('is_blocked', models.BooleanField(default=False, verbose_name='Gesperrt')),
                ('block_reason', models.CharField(blank=True, max_length=200, verbose_name='Sperrgrund')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='taskmanager.taskschedule')),
            ],
            options={
                'verbose_name': 'Zeitslot',
                'verbose_name_plural': 'Zeitslots',
                'ordering': ['start_time'],
                'unique_together': {('schedule', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='TaskExperience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experience_points', models.PositiveIntegerField(default=0, verbose_name='Erfahrungspunkte')),
                ('completed_tasks', models.PositiveIntegerField(default=0, verbose_name='Abgeschlossene Aufgaben')),
                ('average_rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, verbose_name='Durchschnittsbewertung')),
                ('last_completed', models.DateTimeField(blank=True, null=True, verbose_name='Zuletzt abgeschlossen')),
                ('is_certified', models.BooleanField(default=False, verbose_name='Zertifiziert')),
                ('certification_date', models.DateTimeField(blank=True, null=True, verbose_name='Zertifizierungsdatum')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_experiences', to='members.member')),
                ('task_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='taskmanager.tasktype')),
            ],
            options={
                'verbose_name': 'Aufgabenerfahrung',
                'verbose_name_plural': 'Aufgabenerfahrungen',
                'ordering': ['-experience_points'],
                'unique_together': {('member', 'task_type')},
            },
        ),
        migrations.CreateModel(
            name='TaskBooking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Ausstehend'), ('confirmed', 'Best채tigt'), ('cancelled', 'Storniert'), ('completed', 'Abgeschlossen'), ('no_show', 'Nicht erschienen')], default='confirmed', max_length=20)),
                ('booked_at', models.DateTimeField(auto_now_add=True, verbose_name='Gebucht am')),
                ('cancelled_at', models.DateTimeField(blank=True, null=True, verbose_name='Storniert am')),
                ('cancellation_reason', models.TextField(blank=True, verbose_name='Stornierungsgrund')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Abgeschlossen am')),
                ('notes', models.TextField(blank=True, verbose_name='Notizen')),
                ('rating', models.PositiveIntegerField(blank=True, null=True, verbose_name='Bewertung (1-5)')),
                ('check_in_time', models.DateTimeField(blank=True, null=True, verbose_name='Ankunftszeit')),
                ('check_out_time', models.DateTimeField(blank=True, null=True, verbose_name='Abgangszeit')),
                ('work_quality_rating', models.PositiveIntegerField(blank=True, null=True, verbose_name='Arbeitsqualit채t (1-5)')),
                ('supervisor_notes', models.TextField(blank=True, verbose_name='Anmerkungen Betreuer')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_bookings', to='members.member')),
                ('time_slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='taskmanager.timeslot')),
            ],
            options={
                'verbose_name': 'Aufgabenbuchung',
                'verbose_name_plural': 'Aufgabenbuchungen',
                'ordering': ['-booked_at'],
                'unique_together': {('time_slot', 'member')},
            },
        ),
    ]
